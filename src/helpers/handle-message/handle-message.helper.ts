import type { Message } from "node-telegram-bot-api";
import { bot, config } from "../../bot/config.js";
import { MESSAGES_HANDLERS_DICT } from "../../const/handler.const.js";
import { isSentByHusband, isSentByWife } from "./../is-sent-by.helper.js";
import { ACCESS_DENIED_STICKER, NOT_TEXT_MESSAGE_STICKER } from "../../const/sticker.const.js";
import { ADMIN_MESSAGES_HANDLER_DICT } from "../../const/admin-handler.const.js";
import { checkAdminUser, checkClientUser, hasAdminUser } from "../../bot/bot-users.js";
import { addNewQuote } from "../../database/add-new-quote.js";

export async function messageHandler(message: Message): Promise<unknown> {
    const { chat, text } = message;
    const { id } = chat;

    const messageFromWife = isSentByWife(message);
    const messageFromHusband = isSentByHusband(message);
    const shouldNotRespond = !messageFromWife && !messageFromHusband;

    if (shouldNotRespond) {
        await bot.sendMessage(id, '–ë–∏–ø-–±–æ–ø. –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.');
        await bot.sendSticker(id, ACCESS_DENIED_STICKER);
        return
    }

    if (!text) {
        await bot.sendMessage(id, '–ë–∏–ø-–±–æ–ø. –ù–∏—á–µ –Ω–µ–ø–æ–Ω ü§ñ');
        await bot.sendSticker(id, NOT_TEXT_MESSAGE_STICKER);
        return;
    }
    if (messageFromWife) {
        return handleWifeMessage(message);
    }
    return handleHusbandMessage(message);
}

async function handleHusbandMessage(message: Message): Promise<unknown> {
    const { chat, text } = message;
    const { id } = chat;

    if (!text) return;
    try {
        await checkAdminUser(id);

        const handler = ADMIN_MESSAGES_HANDLER_DICT[text];
        if (handler) return handler(id)

        return await addNewQuote(id, text);
    } catch (e) {
        console.error(e);
        await bot.sendMessage(id, `–û—à–∏–±–∫–∞ 500. –ü–æ–ø—ã—Ç–∞—é—Å—å –≤—ã–≤–µ—Å—Ç–∏ —Å—é–¥–∞:\n${e}`)
    }
}
async function handleWifeMessage(message: Message): Promise<Message | unknown> {
    const { chat, text } = message;
    const { id } = chat;

    if (!text) return;
    try {
        await checkClientUser(id);

        const handler = MESSAGES_HANDLERS_DICT[text];
        if (handler) return await handler(id)

        const isAlarm = shouldInvokeAlarm(text);
        if (isAlarm) return await handleAlarm(id);

        const response = getResponseByRegexMatch(text);
        if (response) return await bot.sendMessage(id, response);

        return await bot.sendMessage(id, '–û—à–∏–±–∫–∞ 422: –Ø –Ω–∏—Ö–µ—Ä–∞ –Ω–µ –ø–æ–Ω—è–ª –±–∏–ø-–±–æ–ø ‚ù§Ô∏è');
    } catch (e) {
        console.error(e);
        await bot.sendMessage(id, '–û—à–∏–±–∫–∞ 500: –ù–∏–∫–∏—Ç–∞ —Ä—É–∫–æ–∂–æ–ø.\n–í—ã —á—Ç–æ-—Ç–æ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–æ –ø–æ–∫–∞ —è –ø—ã—Ç–∞–ª—Å—è —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É –º–µ–Ω—è –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å üò≠\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ù–∏–∫–∏—Ç–µ')
    }
}
async function handleAlarm(id: number) {
    if (hasAdminUser()) {
        const { chatId } = config.adminUser!.dataValues;
        await bot.sendMessage(chatId, '–í–ù–ò–ú–ê–ù–ò–ï. –ê–ª–∏–Ω–∞ —Å–æ–æ–±—â–∏–ª–∞ —á—Ç–æ –µ–π –ø–ª–æ—Ö–æ. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–∏–º–∞–∂–∫–∏ –≤ —Å—Ä–æ—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ');
        await bot.sendMessage(id, '–¢–†–ï–í–û–ì–ê. –ü—Ä–æ—Ç–æ–∫–æ–ª "–ê–ª–∏–Ω–µ –ø–ª–æ—Ö–æ" –∑–∞–ø—É—â–µ–Ω. –°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ –≥–ª–∞–≤–Ω—ã–π –æ—Ç–¥–µ–ª —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
        return;
    }
    await bot.sendMessage(id, '–¢–†–ï–í–û–ì–ê. –ü—Ä–æ—Ç–æ–∫–æ–ª "–ê–ª–∏–Ω–µ –ø–ª–æ—Ö–æ" –∑–∞–ø—É—â–µ–Ω. –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –≥–ª–∞–≤–Ω—ã–π –æ—Ç–¥–µ–ª —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏');
    await bot.sendMessage(id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ù–∏–∫–∏—Ç–µ –æ—á–Ω–æ ü§ñ');
    return;
}
function shouldInvokeAlarm(text: string): boolean {
    const badRegex = /(^|\s)–ø–ª–æ—Ö–æ(\s|$)/i;
    return Boolean(text.match(badRegex));
}
function getResponseByRegexMatch(text: string) {
    const loveRegex = /(?:—è\s+—Ç–µ–±—è\s+–ª—é–±–ª—é|–ª—é–±–ª—é\s+—Ç–µ–±—è|–ª—é–±–ª—é)/i;
    if (text.match(loveRegex)) {
        return '–ú–æ–∏ —Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã —Ç—Ä–µ–ø–µ—â–∞—Ç –ø—Ä–∏ –≤–∏–¥–µ —Ç–µ–±—è –±–æ–≥–∏–Ω—è ü§ñ'
    }
}